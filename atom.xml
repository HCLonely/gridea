<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gridea.hclonely.com</id>
    <title>HCLonely Blog</title>
    <updated>2020-06-24T12:41:45.477Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gridea.hclonely.com"/>
    <link rel="self" href="https://gridea.hclonely.com/atom.xml"/>
    <subtitle>一个懒人的博客</subtitle>
    <logo>https://gridea.hclonely.com/images/avatar.png</logo>
    <icon>https://gridea.hclonely.com/favicon.ico</icon>
    <rights>All rights reserved 2020, HCLonely Blog</rights>
    <entry>
        <title type="html"><![CDATA[一款基于webstack的hexo主题]]></title>
        <id>https://gridea.hclonely.com/post/3cd4fb34/</id>
        <link href="https://gridea.hclonely.com/post/3cd4fb34/">
        </link>
        <updated>2020-06-05T12:22:13.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>一款基于<a href="https://github.com/WebStackPage/WebStackPage.github.io">WebStackPage</a>的 Hexo 主题。<a href="https://webstack.hclonely.com/">Demo</a></p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/HCLonely/hexo-theme-webstack@latest/screenshot/screenshot.png" alt="screenshot" loading="lazy"></figure>
<h2 id="安装">安装</h2>
<pre><code class="language-shell">git clone https://github.com/HCLonely/hexo-theme-webstack themes/webstack
</code></pre>
<h2 id="配置">配置</h2>
<h3 id="favicon">favicon</h3>
<blockquote>
<p>网站图标</p>
</blockquote>
<p>示例：</p>
<pre><code class="language-yml">favicon: /favicon.ico
</code></pre>
<h3 id="banner">banner</h3>
<blockquote>
<p>[可选]分享网站到 twitter 和 facebook 时的图片。</p>
</blockquote>
<p>示例：</p>
<pre><code class="language-yml">banner: /images/webstack_banner_cn.png
</code></pre>
<h3 id="logo">logo</h3>
<blockquote>
<p>网站 logo</p>
</blockquote>
<ul>
<li>
<p><code>expanded</code>: 侧边栏展开时左上角的 logo</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/expanded.webp" alt="expanded" loading="lazy"></figure>
</li>
<li>
<p><code>collapsed</code>: 侧边栏收起时左上角的 logo</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/collapsed.webp" alt="collapsed" loading="lazy"></figure>
</li>
<li>
<p><code>dark</code>: 顶栏为暗色时左上角的 logo, 仅 <code>about</code> 页面生效</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/dark.webp" alt="dark" loading="lazy"></figure>
</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">logo:
  expanded: /images/logo@2x.png
  collapsed: /images/logo-collapsed@2x.png
  dark: /images/logo_dark@2x.png
</code></pre>
<h3 id="flag">flag</h3>
<blockquote>
<p>语言标识</p>
</blockquote>
<ul>
<li>icon: 语言图标，默认仅有<code>flag-cn</code>和<code>flag-us</code>, 其他图标自行寻找存放于<code>主题目录/source/images/flags/</code></li>
<li>name: 语言名称</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">flag:
  icon: flag-cn
  name: Chinese
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/flag.webp" alt="flag" loading="lazy"></figure>
<h3 id="githubcorner">githubCorner</h3>
<blockquote>
<p>右上角的 <a href="http://tholman.com/github-corners/">github corner</a></p>
</blockquote>
<p>示例：</p>
<pre><code class="language-yml">githubCorner: '&lt;a href=&quot;https://github.com/HCLonely/hexo-theme-webstack&quot; class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;&lt;svg width=&quot;80&quot; height=&quot;80&quot; viewBox=&quot;0 0 250 250&quot; style=&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot; aria-hidden=&quot;true&quot;&gt;&lt;path d=&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot; fill=&quot;currentColor&quot; style=&quot;transform-origin: 130px 106px;&quot; class=&quot;octo-arm&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot; fill=&quot;currentColor&quot; class=&quot;octo-body&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}&lt;/style&gt;'
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/github.webp" alt="github" loading="lazy"></figure>
<h3 id="since">since</h3>
<blockquote>
<p>建站年份，显示在页面底部</p>
</blockquote>
<p>示例：</p>
<pre><code class="language-yml">since: 2020
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/since.webp" alt="since" loading="lazy"></figure>
<h3 id="menu">menu</h3>
<blockquote>
<p><strong>[主要]侧边栏菜单设置</strong></p>
</blockquote>
<ul>
<li>name: 分组名</li>
<li>icon: 分组图标</li>
<li>config: [主要]分组内容(详细设置查看<a href="#config">Config</a>)，如果有二级菜单则不需要此项！</li>
<li>submenu: 二级菜单，如果有二级菜单则不需要<code>config</code>, 此选项内容包含<code>name</code>, <code>icon</code>, <code>config</code>选项</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">menu:
  - name: 常用工具
    icon: far fa-star
    config: hotTools
  - name: 其他工具
    icon: fas fa-tools
    submenu:
      - name: 开发工具
        icon: fas fa-tools
        config: devTools
      - name: 我的博客
        icon: fas fa-blog
        config: myBlog
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/menu.webp" alt="menu" loading="lazy"></figure>
<h3 id="about">about</h3>
<blockquote>
<p>侧边栏的关于本站</p>
</blockquote>
<ul>
<li>url: 关于页面链接</li>
<li>name: 在侧边栏显示的文字</li>
<li>icon: 图标</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">about:
  url: /about/
  icon: far fa-heart
  name: 关于本站
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/about.webp" alt="about" loading="lazy"></figure>
<h3 id="aboutpage">aboutPage</h3>
<blockquote>
<p>关于页面设置</p>
</blockquote>
<ol>
<li>生成关于页面</li>
</ol>
<pre><code class="language-shell">hexo new page about
</code></pre>
<ol start="2">
<li>编辑<code>source/about/index.md</code>, 添加<code>type: 'about'</code></li>
</ol>
<pre><code class="language-yml">---
title: about
date: 2020-06-04 18:11:54
type: 'about'
---
</code></pre>
<ol start="3">
<li>编辑主题配置文件的<code>aboutPage</code></li>
</ol>
<ul>
<li>website: 关于本站内容
<ul>
<li>head: 标题</li>
<li>html: 内容，支持<code>html</code>语法</li>
</ul>
</li>
<li>webmaster: 关于站长内容
<ul>
<li>head: 标题</li>
<li>name: 站长名字</li>
<li>url: 链接</li>
<li>img: 头像</li>
<li>description: 描述</li>
<li>html: 其他内容，支持<code>html</code>语法</li>
</ul>
</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">aboutPage:
  website:
    head: 关于本站
    html: '&lt;blockquote&gt;&lt;p&gt;本站是hexo主题&lt;a href=&quot;https://github.com/HCLonely/hexo-theme-webstack&quot;&gt;hexo-theme-webstack&lt;/a&gt;的demo站。&lt;/p&gt;&lt;/blockquote&gt;'
  webmaster:
    head: 关于站长
    name: HCLonely
    url: https://blog.hclonely.com/
    img: /images/logos/myblog.png
    description: 懒人一个
    html: '&lt;br /&gt;&lt;blockquote&gt;&lt;p&gt;本站是&lt;a href=&quot;https://github.com/HCLonely&quot;&gt;HCLonely&lt;/a&gt;基于&lt;a href=&quot;https://github.com/WebStackPage/WebStackPage.github.io&quot;&gt;WebStackPage&lt;/a&gt;项目做的一款&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;主题。&lt;/p&gt;&lt;/blockquote&gt;'
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/3cd4fb34/aboutPage.webp" alt="aboutPage" loading="lazy"></figure>
<h2 id="config">config</h2>
<blockquote>
<p>[主要]网站内容设置</p>
</blockquote>
<h3 id="参数">参数</h3>
<ul>
<li>name: 网站名称</li>
<li>url: 网站链接</li>
<li>img: 网站图标</li>
<li>description: 网站描述</li>
</ul>
<p>示例：</p>
<pre><code class="language-yml">- name: HCLonely Blog
  url: https://blog.hclonely.com/
  img: /images/logos/myBlog.png
  description: 一个懒人的博客。
</code></pre>
<h3 id="关联设置名称并添加网站">关联设置名称并添加网站</h3>
<p>在<code>menu</code>和<code>submenu</code>中设置的<code>config</code>的内容为此选项的名称。</p>
<p>例<code>menu</code>：</p>
<pre><code class="language-yml">menu:
  - name: 常用工具
    icon: far fa-star
    config: hotTools
</code></pre>
<p>则<code>常用工具</code>分组里的网站有以下两种添加方式：</p>
<ul>
<li>
<p>在主题的<code>_config.yml</code>里添加：</p>
<pre><code class="language-yml">hotTools:
  - name: HCLonely Blog
    url: https://blog.hclonely.com/
    img: /images/logos/myBlog.png
    description: 一个懒人的博客。
  - name: Github
    url: https://github.com/
    img: /images/logos/github.png
    description: 面向开源及私有软件项目的托管平台。
</code></pre>
</li>
<li>
<p>在<code>站点根目录/source/_data/</code>(没有自行创建)内新建<code>hotTools.yml</code>文件，文件内容如下：</p>
<pre><code class="language-yml">- name: HCLonely Blog
  url: https://blog.hclonely.com/
  img: /images/logos/myBlog.png
  description: 一个懒人的博客。
- name: Github
  url: https://github.com/
  img: /images/logos/github.png
  description: 面向开源及私有软件项目的托管平台。
</code></pre>
</li>
</ul>
<p>以上两种方式任选一种即可，建议使用第二种。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用cron-job解决Valine-admin因流控原因自动唤醒失败的问题]]></title>
        <id>https://gridea.hclonely.com/post/ac04080d/</id>
        <link href="https://gridea.hclonely.com/post/ac04080d/">
        </link>
        <updated>2020-05-17T12:20:24.000Z</updated>
        <content type="html"><![CDATA[<p>Valine-admin由于Leancloud流控原因，自动唤醒任务可能会失败，详情：https://forum.leancloud.cn/t/topic/22595<br>
所以这里介绍一个使用第三方计划任务网站进行定时唤醒Valine-admin的方法。</p>
<h2 id="注册cron-job帐号">注册<a href="https://cron-job.org/">cron-job</a>帐号</h2>
<p>注册地址：https://cron-job.org/en/signup/</p>
<blockquote>
<p>注册时的时区请选择<code>Asia/Shanghai</code></p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/ac04080d/1.webp" alt="注册" loading="lazy"></figure>
<h2 id="添加一个计划任务">添加一个计划任务</h2>
<ol>
<li>
<p>登陆之后依次点击<code>Members</code>,<code>cronjobs</code>,<code>Create cronjob</code></p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/ac04080d/2.webp" alt="First" loading="lazy"></figure>
</li>
<li>
<p>Title, Address</p>
<ul>
<li><code>Title</code>可以随便填一个</li>
<li><code>Address</code>填写你的云引擎环境变量的<code>ADMIN_URL</code>，也就是Leancloud的<code>Web 主机域名</code>。如果你用的我<a href="/posts/409d3090/">Valine添加博主标签及评论微信、QQ通知</a>文章里的最新版的仓库，还需要在后面加上<code>/start</code>，当然也可以不加，加上会有唤醒日志。</li>
</ul>
</li>
<li>
<p>Schedule</p>
<ul>
<li>选择<code>User-defined</code>进行自定义设置</li>
<li><code>Days of month</code>: 全选</li>
<li><code>Days of week</code>: 全选</li>
<li><code>Months</code>: 全选</li>
<li><code>Hours</code>: 你需要在哪个时间段唤醒就选择什么</li>
<li><code>Minutes</code>: 选择<code>0</code>,<code>20</code>,<code>40</code></li>
<li>按住<kbd>Ctrl</kbd>可多选</li>
</ul>
</li>
<li>
<p>Notifications</p>
<ul>
<li>可以不用修改，也可以根据自己的需要修改</li>
</ul>
</li>
<li>
<p>Common</p>
<ul>
<li>勾选<code>Save responses</code>, 保存唤醒日志</li>
</ul>
</li>
<li>
<p>点击<code>Create cronjob</code></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo哔哩哔哩番剧页面插件]]></title>
        <id>https://gridea.hclonely.com/post/8422e92e/</id>
        <link href="https://gridea.hclonely.com/post/8422e92e/">
        </link>
        <updated>2020-02-09T12:19:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2>
<p><strong>为Hexo添加哔哩哔哩番剧页面，参考了<a href="https://github.com/mythsman/hexo-douban">hexo-douban</a>的部分代码</strong></p>
<h2 id="安装">安装</h2>
<pre><code class="language-bash">$ npm install hexo-bilibili-bangumi --save
</code></pre>
<h2 id="更新">更新</h2>
<pre><code class="language-bash">$ npm install hexo-bilibili-bangumi --update --save
</code></pre>
<hr>
<h2 id="配置">配置</h2>
<p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p>
<pre><code class="language-yaml">bangumi:
  enable: true
  path:
  vmid:
  title: '追番列表'
  quote: '生命不息，追番不止！'
  show: 1
  loading:
</code></pre>
<ul>
<li><strong>enable</strong>: 是否启用</li>
<li><strong>path</strong>: 番剧页面路径，默认<code>bangumis/index.html</code></li>
<li><strong>vmid</strong>: 哔哩哔哩番剧页面的 <code>vmid(uid)</code>,<a href="#%E8%8E%B7%E5%8F%96uid">如何获取？</a></li>
<li><strong>title</strong>: 该页面的标题</li>
<li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li>
<li><strong>show</strong>: 初始显示页面：<code>0: 想看</code>, <code>1: 在看</code>, <code>2: 看过</code>，默认为<code>1</code></li>
<li><strong>loading</strong>: 图片加载完成前的loading图片</li>
</ul>
<h2 id="使用">使用</h2>
<ol>
<li>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo bangumi -u</code>命令更新番剧数据！</li>
<li>删除数据命令:<code>hexo bangumi -d</code></li>
</ol>
<h2 id="获取uid">获取uid</h2>
<p>登录哔哩哔哩后前往<a href="https://space.bilibili.com/">https://space.bilibili.com/</a>页面，网址最后的一串数字就是 <code>uid</code></p>
<p><em><strong>需要将追番列表设置为公开！</strong></em></p>
<h2 id="示例">示例</h2>
<p><a href="https://blog.hclonely.com/bangumis/">示例页面</a></p>
<h2 id="lisense">Lisense</h2>
<p><a href="https://github.com/HCLonely/hexo-bilibili-bangumi/blob/master/LICENSE">Apache Licence 2.0</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hexo Steam游戏库页面插件]]></title>
        <id>https://gridea.hclonely.com/post/672d4d3b/</id>
        <link href="https://gridea.hclonely.com/post/672d4d3b/">
        </link>
        <updated>2020-02-09T12:17:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2>
<p><strong>为Hexo添加Steam游戏库页面</strong></p>
<h2 id="安装">安装</h2>
<pre><code class="language-bash">$ npm install hexo-steam-games --save
</code></pre>
<h2 id="更新">更新</h2>
<pre><code class="language-bash">$ npm install hexo-steam-games --update --save
</code></pre>
<hr>
<h2 id="配置">配置</h2>
<p>将下面的配置写入站点的配置文件 <code>_config.yml</code> 里(不是主题的配置文件).</p>
<pre><code class="language-yaml">steam:
  enable: true
  steamId: '*****' #steam 64位Id
  path:
  title: Steam游戏库
  quote: '+1+1+1+1+1'
  tab: recent
  length: 1000
  imgUrl: '*****'
  proxy:
    host:
    port:
</code></pre>
<ul>
<li><strong>enable</strong>: 是否启用</li>
<li><strong>steamId</strong>: steam 64位Id(需要放在引号里面，不然会有BUG), <em><strong>需要将steam库设置为公开！</strong></em></li>
<li><strong>path</strong>: 番剧页面路径，默认<code>steamgames/index.html</code></li>
<li><strong>title</strong>: 该页面的标题</li>
<li><strong>quote</strong>: 写在页面开头的一段话,支持html语法</li>
<li><strong>tab</strong>: <code>all</code>或<code>recent</code>, <code>all: 所有游戏</code>, <code>recent: 最近游玩的游戏</code></li>
<li><strong>length</strong>: 要显示游戏的数量，游戏太多的话可以限制一下</li>
<li><strong>imgUrl</strong>: 图片链接，在<code>quote</code>下面放一张图片，图片链接到Steam个人资料，可留空</li>
<li><strong>proxy</strong>: 如果无法访问steam社区的话请使用代理
<ul>
<li><strong>host</strong>: 代理ip或域名</li>
<li><strong>port</strong>: 代理端口</li>
</ul>
</li>
</ul>
<h2 id="使用">使用</h2>
<ol>
<li>在<code>hexo generate</code>或<code>hexo deploy</code>之前使用<code>hexo steam -u</code>命令更新steam游戏库数据！</li>
<li>删除游戏库数据指令:<code>hexo steam -d</code></li>
</ol>
<h2 id="手动获取游戏库数据">手动获取游戏库数据</h2>
<p>如果<code>hexo steam -u</code>命令一直获取游戏库数据失败，可以用以下方法手动获取游戏库数据：</p>
<ol>
<li>
<p>浏览器打开<code>https://steamcommunity.com/id/{steamId}/games?tab={tab}</code>, <code>{steamId}</code>和<code>{tab}</code>分别替换为上面配置中提到的<code>steamId</code>和<code>tab</code></p>
</li>
<li>
<p>网页加载完成后，打开浏览器控制台(按<code>F12</code>)，输入以下代码并回车：</p>
<pre><code>let script = jQuery('script[language=&quot;javascript&quot;]');
var games = [];
for (let i = 0; i &lt; script.length; i++) {
  if (script.eq(i).html().includes(&quot;rgGames&quot;)) {
    let rgGames = script.eq(i).html().match(/var.*?rgGames.*?=.*?(\[[\w\W]*?\}\}\]);/);
    if (rgGames) {
      games = JSON.parse(rgGames[1]);
      break;
    }
  }
}
document.write(JSON.stringify(games))
</code></pre>
</li>
<li>
<p>将生成的内容复制到<code>博客根目录/node_modules/hexo-steam-games/data/games.json</code>文件内，如果没有对应的文件或目录，请自行创建</p>
</li>
</ol>
<h2 id="示例">示例</h2>
<p><a href="https://blog.hclonely.com/steamgames/">示例页面</a></p>
<h2 id="lisense">Lisense</h2>
<p><a href="https://github.com/HCLonely/hexo-steam-games/blob/master/LICENSE">Apache Licence 2.0</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AuTo Redeem Steamkey脚本]]></title>
        <id>https://gridea.hclonely.com/post/71381355/</id>
        <link href="https://gridea.hclonely.com/post/71381355/">
        </link>
        <updated>2020-02-07T12:16:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="功能">功能</h2>
<p>复制网页中的Steamkey后自动激活。</p>
<h2 id="脚本链接">脚本链接</h2>
<ul>
<li><a href="https://github.com/HCLonely/user.js/raw/master/AuTo_Redeem_Steamkey.user.js">点此安装</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/36666">GreasyFork</a></li>
</ul>
<h2 id="功能介绍">功能介绍</h2>
<h3 id="首次使用30版本请先设置">首次使用3.0+版本请先设置：</h3>
<ol>
<li>点击Tampermonkey插件图标</li>
<li>找到AuTo Redeemer Steamkey下面的&quot;设置&quot;</li>
</ol>
<h3 id="功能-2">功能：</h3>
<ul>
<li>一键激活页面内所有key</li>
<li>第一次点击key会给key添加超链接，再次点击就可以激活</li>
<li>复制key询问是否激活</li>
<li>选中key显示steam图标，点击图标激活</li>
<li>支持多key批量激活</li>
<li>若一次激活的Key的数量超过9个则会自动分批激活（等待20秒）</li>
<li>激活完成后显示未使用key</li>
<li>支持ASF激活(3.0新增)</li>
<li><a href="https://store.steampowered.com/account/licenses/">steam账户页面</a>和<a href="https://store.steampowered.com/account/registerkey">steam激活页面</a>支持更换国家/地区</li>
<li><a href="https://store.steampowered.com/account/registerkey">steam激活页面</a>增加激活sub,激活礼物卡或钱包充值码(测试)功能</li>
<li><a href="https://steamdb.info/freepackages/">https://steamdb.info/freepackages/</a>网站点击代码区域后自动复制并跳转到<a href="https://store.steampowered.com/account/licenses/">steam账户许可页面</a>并激活，开启ASF功能后使用<code>!addlicense</code>功能激活</li>
</ul>
<h2 id="tampermonkey菜单">Tampermonkey菜单</h2>
<h3 id="设置">设置</h3>
<h4 id="全局设置">全局设置</h4>
<ul>
<li><code>新标签页激活</code>:激活key/sub时打开激活页面激活(同2.X版本)，默认关闭</li>
<li><code>开启复制捕捉</code>:复制的内容含有<code>AAAAA-BBBBB-CCCCC</code>格式的内容是询问是否激活，默认开启</li>
<li><code>开启选中捕捉</code>:选中的文本中含有<code>AAAAA-BBBBB-CCCCC</code>格式的内容是在鼠标光标右下显示steam图标，点击图标即激活，默认开启</li>
<li><code>开启点击捕捉</code>:点击的网页中<code>AAAAA-BBBBB-CCCCC</code>格式的内容是会给次内用添加一个超链接，再次点击即激活，默认开启</li>
</ul>
<h4 id="asf设置">ASF设置</h4>
<ul>
<li><code>ASF IPC协议</code>:<code>http</code>或<code>https</code>,默认<code>http</code></li>
<li><code>ASF IPC地址</code>:如果是本机运行ASF则是<code>127.0.0.1</code>,如果是服务器运行则为服务器ip或域名,默认<code>127.0.0.1</code></li>
<li><code>ASF IPC端口</code>:默认<code>1242</code></li>
<li><code>ASF IPC密码</code>:你设置的ASF IPC密码,默认为空</li>
<li><code>ASF Bot名字</code>:用来激活key的机器人名字,留空则按你ASF设置的激活顺序激活,对单账号用户没影响,可留空,默认为空</li>
<li><code>开启ASF激活</code>:开启后全局设置中的<code>新标签页激活</code>功能无效,开启后激活key/sub时使用ASF激活，需配置好以上ASF配置</li>
</ul>
<h3 id="asf连接测试">ASF连接测试</h3>
<ul>
<li>需开启ASF激活功能并配置好ASF,尝试向ASF发送<code>!stats</code>命令，如果返回内存用量则为连接成功</li>
</ul>
<h3 id="执行asf命令">执行ASF命令</h3>
<ul>
<li>可远程执行ASF命令</li>
<li>提供ASF命令查询功能</li>
</ul>
<h3 id="查看上次激活记录">查看上次激活记录</h3>
<ul>
<li>可以查看最近一次激活key的记录</li>
</ul>
<h3 id="key格式转换">key格式转换</h3>
<ul>
<li>可以将key转换成一下两种格式：</li>
</ul>
<ol>
<li><code>key</code><br>
<code>key</code><br>
<code>key</code></li>
<li><code>key,key,key</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[live2D看板娘脚本]]></title>
        <id>https://gridea.hclonely.com/post/f09c9fef/</id>
        <link href="https://gridea.hclonely.com/post/f09c9fef/">
        </link>
        <updated>2020-02-07T12:15:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="功能">功能</h2>
<p>给网页添加一个Live2D看板娘。</p>
<h2 id="脚本链接">脚本链接</h2>
<ul>
<li><a href="https://github.com/HCLonely/live2d.user.js/raw/master/live2d.user.js">点此安装</a></li>
<li><a href="https://greasyfork.org/zh-CN/scripts/388065">GreasyFork</a></li>
</ul>
<h2 id="模型预览">模型预览</h2>
<p><a href="https://live2d.hclonely.com/#preview">https://live2d.hclonely.com/#preview</a></p>
<h2 id="详细设置">详细设置</h2>
<h3 id="设置参数">设置参数</h3>
<p><em>Tips： 已自带默认参数，如无特殊要求可跳过</em></p>
<ul>
<li>
<p>后端接口</p>
<ul>
<li><code>live2d_settings['modelAPI']</code>：看板娘 API 地址，默认值 <code>'https://live2d.hclonely.com/'</code>, 可根据<a href="https://github.com/fghrsh/live2d_api">live2d_api</a>自建api</li>
<li><code>live2d_settings['staticAPI']</code>：看板娘模型 API 地址，默认值 <code>'https://cdn.jsdelivr.net'</code></li>
<li><code>live2d_settings['tipsMessage']</code>：提示语读取路径，暂不可改</li>
<li><code>live2d_settings['hitokotoAPI']</code>：一言 API 接口，可选 <code>'lwl12.com'</code>，<code>'hitokoto.cn'</code>，<code>'fghrsh.net'</code>，<code>'jinrishici.com'</code> (古诗词)，<code>'rand'</code> (随机)</li>
</ul>
</li>
<li>
<p>默认模型</p>
<ul>
<li><code>live2d_settings['modelId']</code>：默认模型(分组) ID，可 <code>[F12]</code> 呼出 <code>控制台(Console)</code> 找到</li>
<li><code>live2d_settings['modelTexturesId']</code>：默认材质(模型) ID，可 <code>[F12]</code> 呼出 <code>控制台(Console)</code> 找到</li>
</ul>
</li>
<li>
<p>工具栏设置</p>
<ul>
<li><code>live2d_settings['showToolMenu']</code>：显示工具栏， <code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canCloseLive2d']</code>：关闭看板娘 按钮，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canSwitchModel']</code>：切换模型 按钮， <code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canSwitchTextures']</code>：切换材质 按钮， <code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canSwitchHitokoto']</code>：切换一言 按钮， <code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canTakeScreenshot']</code>：看板娘截图 按钮，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canTurnToHomePage']</code>：返回首页 按钮， <code>true</code> | <code>false</code></li>
<li><code>live2d_settings['canTurnToAboutPage']</code>：跳转关于页 按钮，<code>true</code> | <code>false</code></li>
</ul>
</li>
<li>
<p>模型切换模式</p>
<ul>
<li><code>live2d_settings['modelStorage']</code>：记录 ID ，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['modelRandMode']</code>：模型切换，可选 <code>'rand'</code> (随机) | <code>'switch'</code> (顺序)</li>
<li><code>live2d_settings['modelTexturesRandMode']</code>：材质切换，可选 <code>'rand'</code> | <code>'switch'</code></li>
</ul>
</li>
<li>
<p>提示消息选项</p>
<ul>
<li><code>live2d_settings['showHitokoto']</code>：空闲时一言，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['showF12Status']</code>：控制台显示加载状态，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['showF12Message']</code>：提示消息输出到控制台，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['showF12OpenMsg']</code>：控制台被打开触发提醒，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['showCopyMessage']</code>：内容被复制触发提醒，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['showWelcomeMessage']</code>：进入面页时显示欢迎语，<code>true</code> | <code>false</code></li>
</ul>
</li>
<li>
<p>看板娘样式设置</p>
<ul>
<li><code>live2d_settings['waifuSize']</code>：看板娘大小，例如 <code>'280x250'</code>，<code>'600x535'</code></li>
<li><code>live2d_settings['waifuTipsSize']</code>：提示框大小，例如 <code>'250x70'</code>，<code>'570x150'</code></li>
<li><code>live2d_settings['waifuFontSize']</code>：提示框字体，例如 <code>'12px'</code>，<code>'30px'</code></li>
<li><code>live2d_settings['waifuToolFont']</code>：工具栏字体，例如 <code>'14px'</code>，<code>'36px'</code></li>
<li><code>live2d_settings['waifuToolLine']</code>：工具栏行高，例如 <code>'20px'</code>，<code>'36px'</code></li>
<li><code>live2d_settings['waifuToolTop']</code>：工具栏顶部边距，例如 <code>'0px'</code>，<code>'-60px'</code></li>
<li><code>live2d_settings['waifuMinWidth']</code>：面页小于 指定宽度 隐藏看板娘，例如 <code>'disable'</code> (停用)，<code>'768px'</code></li>
<li><code>live2d_settings['waifuEdgeSide']</code>：看板娘贴边方向，例如 <code>'left:0'</code> (靠左 0px)，<code>'right:30'</code> (靠右 30px)</li>
<li><code>live2d_settings['waifuDraggable']</code>：拖拽样式，可选 <code>'disable'</code> (禁用)，<code>'axis-x'</code> (只能水平拖拽)，<code>'unlimited'</code> (自由拖拽)</li>
<li><code>live2d_settings['waifuDraggableRevert']</code>：松开鼠标还原拖拽位置，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['waifuDraggableSave']</code>：是否保存拖拽后的位置，刷新后依然生效，需要将上面的选项和下面的选项都设置为<code>false</code>，<code>true</code> | <code>false</code></li>
<li><code>live2d_settings['waifuDraggableClear']</code>：清空上次保存的位置，<code>true</code> | <code>false</code></li>
</ul>
</li>
<li>
<p>其他杂项设置</p>
<ul>
<li><code>live2d_settings['l2dVersion']</code>：当前版本 (无需修改)</li>
<li><code>live2d_settings['l2dVerDate']</code>：更新日期 (无需修改)</li>
<li><code>live2d_settings['homePageUrl']</code>：首页地址，可选 <code>'auto'</code> (自动)，<code>'{URL 网址}'</code></li>
<li><code>live2d_settings['aboutPageUrl']</code>：关于页地址，<code>'{URL 网址}'</code></li>
<li><code>live2d_settings['screenshotCaptureName']</code>：看板娘截图文件名，例如 <code>'live2d.png'</code></li>
</ul>
</li>
</ul>
<h3 id="定制提示语">定制提示语</h3>
<p><em>Tips： <code>waifu-tips.json</code> 已自带默认提示语，如无特殊要求可跳过</em></p>
<ul>
<li><code>&quot;waifu&quot;</code> 系统提示</li>
<li><code>&quot;console_open_msg&quot;</code> 控制台被打开提醒（支持多句随机）</li>
<li><code>&quot;copy_message&quot;</code> 内容被复制触发提醒（支持多句随机）</li>
<li><code>&quot;screenshot_message&quot;</code> 看板娘截图提示语（支持多句随机）</li>
<li><code>&quot;hidden_message&quot;</code> 看板娘隐藏提示语（支持多句随机）</li>
<li><code>&quot;load_rand_textures&quot;</code> 随机材质提示语（暂不支持多句）</li>
<li><code>&quot;hour_tips&quot;</code> 时间段欢迎语（支持多句随机）</li>
<li><code>&quot;referrer_message&quot;</code> 请求来源欢迎语（不支持多句）</li>
<li><code>&quot;referrer_hostname&quot;</code> 请求来源自定义名称（根据 host，支持多句随机）</li>
<li><code>&quot;model_message&quot;</code> 模型切换欢迎语（根据模型 ID，支持多句随机）</li>
<li><code>&quot;hitokoto_api_message&quot;</code>，一言 API 输出模板（不支持多句随机）</li>
<li><code>&quot;mouseover&quot;</code> 鼠标触发提示（根据 CSS 选择器，支持多句随机）</li>
<li><code>&quot;click&quot;</code> 鼠标点击触发提示（根据 CSS 选择器，支持多句随机）</li>
<li><code>&quot;seasons&quot;</code> 节日提示（日期段，支持多句随机）</li>
</ul>
<h3 id="模式设置">模式设置</h3>
<ul>
<li><code>模式切换</code>：英文输入法下依次按下&quot;↑↑↓↓←→←→BABA&quot;(引号不用按，注意是方向键不是WASD)后可进入互动模式，互动模式下依次按下&quot;ESC&quot;(引号不用按，注意不是&quot;Esc&quot;键而是&quot;E&quot;&quot;S&quot;&quot;C&quot;这三个字母键)后可退出互动模式。</li>
<li><code>状态切换</code>：英文输入法下依次按下&quot;hide&quot;后可隐藏看板娘，隐藏状态下依次按下&quot;show&quot;可再次显示看板娘。</li>
</ul>
<p><em>ps:模式切换后会保存（刷新网页后还是刷新前的状态），状态切换后不会保存（刷新网页后恢复默认状态：显示状态）。</em></p>
<ul>
<li><code>普通模式</code>：默认为普通模式，此模式下为了浏览网页体验看板娘不可操作（看板娘显示在最前但鼠标可以操作后面的元素）。</li>
<li><code>互动模式</code>：此模式下看板娘显示在最前并且鼠标优先操作看板娘。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome插件推荐]]></title>
        <id>https://gridea.hclonely.com/post/72a59031/</id>
        <link href="https://gridea.hclonely.com/post/72a59031/">
        </link>
        <updated>2020-02-04T12:13:57.000Z</updated>
        <content type="html"><![CDATA[<p><strong>这里推荐一些好用的谷歌浏览器(Chrome)插件</strong></p>
<h2 id="adblock-最佳广告拦截工具">AdBlock — 最佳广告拦截工具</h2>
<p><strong>在YouTube、Facebook、Twitch和其他你喜爱的网站上拦截广告和弹窗。</strong></p>
<p>AdBlock 是最好的广告拦截工具，拥有超过 6000 万用户，也是最受欢迎的 Chrome 扩展程序之一，下载量超过 3.5 亿次！</p>
<p><em>功能特色：</em></p>
<ul>
<li>☆ 拦截 YouTube、Facebook、Twitch 和所有您喜爱的网站上的弹出窗口、广告和恼人的横幅广告（就连视频广告也可以移除！）</li>
<li>☆ 拦截第三方跟踪代码并保护您的隐私</li>
<li>☆ 拦截带有恶意软件、诈骗内容和加密货币挖矿代码的恶意广告，让您安全浏览</li>
<li>☆ 缩短页面加载时间，享受更快的网络</li>
<li>☆ 通过滤镜、白名单、深色模式和其他丰富多彩的主题自定义您的体验</li>
<li>☆ AdBlock 团队提供快速、友好的支持，以及强大的帮助中心，使您能够独立排除故障</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom">安装链接</a></p>
<h2 id="tampermonkey">Tampermonkey</h2>
<p><strong>Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">安装链接</a></p>
<h2 id="扩展管理器extension-manager">扩展管理器（Extension Manager）</h2>
<p><strong>一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全。</strong><br>
<em>特征：</em></p>
<ul>
<li>一键开启/禁用扩展</li>
<li>闪电分组：根据场景快速开启/禁用扩展组（被锁定或主题类扩展除外）</li>
<li>智能排序：可根据您的使用频率智能排序（默认根据名称排序）</li>
<li>右键菜单：提供锁定、卸载、选项配置、主页、APP运行等快捷功能</li>
<li>智能搜索：通过关键字或词组快速找到需要的扩展</li>
<li>角标提醒：实时显示扩展状态，用完后提醒重置，减少资源占用（被锁定或主题类扩展除外）</li>
<li>视图选择：提供列表视图和网格视图，符合用户习惯<br>
<a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco">安装链接</a></li>
</ul>
<h2 id="stylus">Stylus</h2>
<p><strong>Stylus 是一个调整网页外观的用户样式管理器。它可让您轻松地为许多热门网站网站安装主题和皮肤。</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne">安装链接</a></p>
<h2 id="checker-plus-for-gmailtm">Checker Plus for Gmail™</h2>
<p><strong>无需打开 Gmail 或 Inbox，即可收到桌面邮件通知，方便地查看、收听或删除邮件，并且支持多账户。</strong></p>
<p><em>和同类扩展程序相比，优势在于:</em></p>
<ul>
<li>更多特性和选项！</li>
<li>更优秀的客户支持服务！我会根据你们的建议增加新特性。</li>
<li>更实时的更新！可参见下方的版本更新记录。</li>
<li>最快捷、简便的方式来管理多个电子邮件帐户</li>
<li>更安全 - 权限要求更少，相比其他扩展。</li>
<li>高评分 - 谷歌应用商店中评分最高的扩展程序之一！太赞了，感谢评分的各位用户！</li>
</ul>
<p><em>特性：</em></p>
<ul>
<li>[新增]采用Gmail聊天提醒中的联系人呈现方式，让您可以选择显示他们的照片或者为他们添加自定义头像</li>
<li>[新增]语音提醒:当收到新邮件而您正收看电影或者忙于烹制晚餐时，您可以选择让电脑大声朗读邮件，可以包括发件人、邮件标题、甚至邮件正文。例如:&quot;Jason发来邮件&quot;，或者&quot;Jason说，到我家来吃饭吧&quot;。这项功能也有益于那些视力障碍者。</li>
<li>[新增]扩展程序可以根据您的设置监测:所有新邮件、收件箱中的新邮件、或者有特定标签的新邮件</li>
<li>[新增]您可以让扩展程序即使在Chrome关闭时依旧在后台运行</li>
<li>[新增]在弹出窗口中对邮件进行缩放以显示大尺寸图片</li>
<li>您无需打开Gmail网页，可直接在弹出窗口中阅读、存档、标记已读或删除邮件（此选项也可关闭，程序将直接引导您前往Gmail网页进行相关操作）</li>
<li>当收到新邮件时，获得桌面音效或语音通知。（您甚至可以录制自己的语音通知）</li>
<li>支持Gmail和Google企业应用服务帐户的多重登录功能</li>
<li>您可以选择使用Gmail打开所有mailto链接，取代常用的邮件客户端。</li>
<li>扩展图标有10多种式样供您选择！</li>
<li>您可以为扩展程序添加新的语音引擎来朗读邮件</li>
<li>最重要的是，您拥有了最快的方式来&quot;清除&quot;收件箱中的未读邮件！</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj">安装链接</a></p>
<h2 id="editthiscookie">EditThisCookie</h2>
<p><strong>EditThisCookie是一个cookie管理器。您可以添加，删除，编辑，搜索，锁定和屏蔽cookies！</strong></p>
<p><em>特性：</em></p>
<ul>
<li>★ 编辑cookies</li>
<li>★ 删除cookies</li>
<li>★ 添加一个新的cookie</li>
<li>★ 创建cookies</li>
<li>★ 搜索cookies</li>
<li>★ 保护cookies (只读cookies)</li>
<li>★ 拦截cookies (cookie 过滤器)</li>
<li>★ 导出cookies为JSON, Netscape cookie 文档 (非常适合wget及curl), Perl::LPW</li>
<li>★ 导入JSON格式cookies</li>
<li>★ 限制任何cookie的最大有效期</li>
<li>★ 改进性能，移除旧的cookies</li>
<li>★ 导入cookies.txt</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg">安装链接</a></p>
<h2 id="enhanced-github">Enhanced GitHub</h2>
<p><strong>显示仓库大小，每个文件的大小，下载链接和复制文件内容的选项</strong></p>
<p><em>特征：</em></p>
<ul>
<li>显示仓库大小</li>
<li>显示每个活动分支中的每个文件大小（不适用于文件夹/符号链接）</li>
<li>显示每个文件的下载链接（不适用于文件夹/符号链接）</li>
<li>将文件内容直接复制到剪贴板（对于markdown文件不起作用）</li>
<li>在查看文件内容的同时下载文件</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">安装链接</a></p>
<h2 id="fehelperjson">FeHelper.JSON</h2>
<p><strong>JSON自动格式化、手动格式化，支持排序、解码、下载等，更多功能可在配置页动态安装！</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/fehelperjson/pkgccpejnmalmdinmhkkfafefagiiiad">安装链接</a></p>
<h2 id="git-history-browser-extension">Git History Browser Extension</h2>
<p><strong>向github添加按钮以查看文件历史记录</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/git-history-browser-exten/laghnmifffncfonaoffcndocllegejnf">安装链接</a></p>
<h2 id="hitup-find-top-things">HitUP - Find Top Things</h2>
<p><strong>在新标签页中显示重要内容，例如GitHub仓库趋势等</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/hitup-find-top-things/eiokaohkigpbonodjcbjpecbnccijkjb">安装链接</a></p>
<h2 id="octotree">Octotree</h2>
<p><em>特征：</em></p>
<ul>
<li>易于浏览的代码树，就像在IDE中一样</li>
<li>使用pjax快速浏览文件</li>
<li>显示拉取请求更改</li>
<li>支持私有仓库</li>
</ul>
<p><em>专业功能（要求登录帐户和/或在https://www.octotree.io/上订阅）:</em></p>
<ul>
<li>增强的代码审查功能</li>
<li>多种语法主题支持</li>
<li>查看整个拉取请求已更改的文件</li>
<li>拉取请求，仓库，发布和文件书签</li>
<li>仓库缓存（提高大型仓库的性能）</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc">安装链接</a></p>
<h2 id="rsshub-radar">RSSHub Radar</h2>
<p><strong>RSSHub Radar 是 RSSHub 的衍生项目，她可以帮助你快速发现和订阅当前网站的 RSS 和 RSSHub</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/rsshub-radar/kefjpfngnndepjbopdmoebkipbgkggaa">安装链接</a></p>
<h2 id="standardized-screenshot">Standardized Screenshot</h2>
<p><strong>标准化的屏幕截图</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/standardized-screenshot/pabdhaakclnechgfhmnhkcbmjobeoope">安装链接</a></p>
<h2 id="新浪微博图床">新浪微博图床</h2>
<p><strong>简单好用的新浪微博图床,支持选择/拖拽/粘贴上传图片,并生成图片地址,HTML,UBB和Markdown等格式,支持浏览和删除历史记录</strong></p>
<p><em>特征：</em></p>
<ul>
<li>支持点选/拖拽/本地粘贴3种方式上传图片至新浪微博图床</li>
<li>支持批量上传</li>
<li>支持生成图片地址,HTML,UBB和Markdown四种格式</li>
<li>支持本地保存和删除上传历史</li>
<li>支持在常用在线markdown编辑器中使用ctrl+v粘贴图片，图片自动上传到微博图床。(目前已支持github，csdn及zybuluo的markdown在线编辑器)</li>
<li>支持https模式</li>
<li>支持自定义Chrome菜单栏图标</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf">安装链接</a></p>
<h2 id="aria2-for-chrome">Aria2 for Chrome</h2>
<p><strong>Aria2 Web UI 支持手动添加和自动拦截下载任务到Aria2。（分叉自YAAW）</strong></p>
<p><a href="https://chrome.google.com/webstore/detail/aria2-for-chrome/mpkodccbngfoacfalldjimigbofkhgjn">安装链接</a></p>
<h2 id="autojoin-for-steamgifts">AutoJoin for SteamGifts</h2>
<p><strong>Steamgifts.com自动加入抽奖和网站增强工具</strong></p>
<p><em>功能特色：</em></p>
<ul>
<li>自动加入抽奖</li>
<li>无限滚动</li>
<li>在首页添加加入和退出抽奖按钮</li>
<li>改善隐藏抽奖</li>
<li>隐藏所有DLC抽奖</li>
<li>夜间主题</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/autojoin-for-steamgifts/bchhlccjhoedhhegglilngpbnldfcidc">安装链接</a></p>
<h2 id="steam-database">Steam Database</h2>
<p><strong>在Steam社区和商店中添加Steam数据库链接和新功能</strong></p>
<p><em>特征：</em></p>
<ul>
<li>在Steam站点之间添加到SteamDB的链接</li>
<li>在商店页面上显示史低价格</li>
<li>在游戏页面上显示在线统计</li>
<li>库存中的快速出售按钮</li>
<li>在商店跳过年龄检查</li>
<li>自动接受市场交易</li>
<li>删除链接过滤器链接</li>
<li>在steamdb.info上突出显示您拥有的游戏，DLC和软件包</li>
<li>其他许多较小的调整和功能</li>
</ul>
<p><a href="https://chrome.google.com/webstore/detail/steam-database/kdbmhfkmnlmbkgbabkdealhhbfhlmmon">安装链接</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aria2 WebUI界面搭建]]></title>
        <id>https://gridea.hclonely.com/post/4b4a0e66/</id>
        <link href="https://gridea.hclonely.com/post/4b4a0e66/">
        </link>
        <updated>2020-02-04T12:12:28.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Aria2是没有图形界面的，这里介绍几款WebUI界面。</strong></p>
<h2 id="webui-aria2">WebUI-Aria2</h2>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/joDMRI.webp" alt="WebUI-Aria2" loading="lazy"></figure>
<h3 id="使用方法">使用方法</h3>
<ol>
<li>运行Aria2并开启RPC模式(配置文件中开启)</li>
<li>打开<a href="https://aria2.hclonely.com/WebUI-Aria2/index.html">Demo网址</a>或自己搭建的网址</li>
<li>点击“设置”→“链接设置”配置好Aria2 RPC 主机和端口并保存</li>
<li>右上角提示“通过 RPC 连接到 Aria2 成功！”就可以了</li>
</ol>
<h3 id="搭建到本地或服务器">搭建到本地或服务器</h3>
<ol>
<li>
<p>下载源码</p>
<ul>
<li><a href="https://github.com/ziahamza/webui-aria2">GitHub官方下载</a></li>
<li><a href="https://aria2.hclonely.com/download/WebUI-Aria2.zip">备用下载</a></li>
</ul>
</li>
<li>
<p>将下载的压缩文件里的docs文件夹解压到本地或服务器</p>
</li>
<li>
<p>搭建到本地的话直接浏览器打开docs文件夹里的index.html即可</p>
</li>
<li>
<p>搭建到服务器的话根据你解压的目录打开相应的网址即可</p>
</li>
</ol>
<h2 id="ariang">AriaNg</h2>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/eUyzCN.webp" alt="AriaNg" loading="lazy"></figure>
<h3 id="使用方法-2">使用方法</h3>
<ol>
<li>运行Aria2并开启RPC模式(配置文件中开启)</li>
<li>打开<a href="https://aria2.hclonely.com/AriaNg/index.html">Demo网址</a>或自己搭建的网址</li>
<li>点击“AriaNg 设置”→“RPC(******:6800)”配置好Aria2 RPC 主机和端口并保存</li>
<li>右上角提示“localhost:6800连接成功”就可以了</li>
</ol>
<h3 id="搭建到本地或服务器-2">搭建到本地或服务器</h3>
<ol>
<li>
<p>下载releases（本地搭建建议下载&quot;AllInOne&quot;版本）</p>
<ul>
<li><a href="https://github.com/mayswind/AriaNg/releases">GitHub官方下载</a></li>
<li><a href="https://aria2.hclonely.com/download/AriaNg.zip">备用下载1</a></li>
<li><a href="https://aria2.hclonely.com/download/AriaNg-AllInOne.zip">备用下载2(AllInOne)</a></li>
</ul>
</li>
<li>
<p>将下载的压缩文件解压到本地或服务器</p>
</li>
<li>
<p>搭建到本地的话直接浏览器打开&quot;index.html&quot;即可</p>
</li>
<li>
<p>搭建到服务器的话根据你解压的目录打开相应的网址即可</p>
</li>
</ol>
<h2 id="yaaw">YAAW</h2>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/jqMOPs.webp" alt="YAAW" loading="lazy"></figure>
<h3 id="使用方法-3">使用方法</h3>
<ol>
<li>运行Aria2并开启RPC模式(配置文件中开启)</li>
<li>打开<a href="https://aria2.hclonely.com/yaaw/index.html">Demo网址</a>或自己搭建的网址；</li>
<li>点击右上角“?”配置好Aria2 RPC 主机和端口并保存（不支持RPC密钥）</li>
<li>提示“Saved!”就可以了</li>
</ol>
<h3 id="搭建到本地或服务器-3">搭建到本地或服务器</h3>
<ol>
<li>
<p>下载源码</p>
<ul>
<li><a href="https://github.com/ghostry/yaaw">GitHub官方下载</a></li>
<li><a href="https://aria2.hclonely.com/download/yaaw.zip">备用下载</a></li>
</ul>
</li>
<li>
<p>将下载的压缩文件解压到本地或服务器</p>
</li>
<li>
<p>搭建到本地的话直接浏览器打开&quot;index.html&quot;即可</p>
</li>
<li>
<p>搭建到服务器的话根据你解压的目录打开相应的网址即可</p>
</li>
</ol>
<h2 id="photon-webui">Photon-WebUI</h2>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/N1MlhE.webp" alt="Photon-WebUI" loading="lazy"></figure>
<h3 id="使用方法-4">使用方法</h3>
<ol>
<li>运行Aria2并开启RPC模式(配置文件中开启)</li>
<li>打开<a href="https://aria2.hclonely.com/Photon-WebUI/index.html">Demo网址</a>或自己搭建的网址</li>
<li>点击“设置”配置好Aria2 RPC 主机和端口</li>
<li>状态显示“已连接”就可以了</li>
</ol>
<h3 id="搭建到本地或服务器-4">搭建到本地或服务器</h3>
<ol>
<li>
<p>下载源码</p>
<ul>
<li><a href="https://github.com/alanzhangzm/Photon-WebUI">GitHub官方下载</a></li>
<li><a href="http://aria2.hclonely.com/download/Photon-WebUI-0.2.0.zip">备用下载</a></li>
</ul>
</li>
<li>
<p>将下载的压缩文件里的”docs”文件夹解压到本地或服务器</p>
</li>
<li>
<p>搭建到本地的话直接浏览器打开”docs”文件夹里的”index.html”即可</p>
</li>
<li>
<p>搭建到服务器的话根据你解压的目录打开相应的网址即可</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux ownCloud私有云搭建]]></title>
        <id>https://gridea.hclonely.com/post/c733a53b/</id>
        <link href="https://gridea.hclonely.com/post/c733a53b/">
        </link>
        <updated>2019-10-04T12:10:57.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于owncloud">关于ownCloud</h2>
<p>  ownCloud是一个开源免费专业的私有云存储项目，它能帮你快速在个人电脑或服务器上架设一套专属的私有云文件同步网盘，可以像 百度云那样实现文件跨平台同步、共享、版本控制、团队协作等等。ownCloud 能让你将所有的文件掌握在自己的手中，只要你的设备性能和空间充足，那么用起来几乎没有任何限制。<br>
  ownCloud支持 <em>Windows</em>、<em>Mac</em>、<em>Android</em>、<em>iOS</em>、<em>Linux</em> 等平台，而且还提供了网页版和 WebDAV 形式访问，因此你可以在任何电脑、手机上都能轻松获取你的文件。<br>
  本篇文章主要介绍了如何在LNMP环境下搭建ownCloud.</p>
<h2 id="需求环境括号内为博主使用的环境基于宝塔面板安装">需求环境(括号内为博主使用的环境，基于宝塔面板安装)</h2>
<ul>
<li>系统: CentOS Linux 7+(CentOS Linux 7.2.1511 64bit)</li>
<li>web服务器: Nginx 1.16+(Nginx 1.16.1)</li>
<li>数据库: MySQL 5.5+(MySQL 5.5.62)</li>
<li>PHP: 5.6&lt;PHP&lt;7.3(PHP 7.2)
<ul>
<li>额外PHP扩展(括号内为建议安装):acpu,redis,fileinfo(opcache,memcache,memcached)</li>
</ul>
</li>
</ul>
<h2 id="安装owncloud">安装ownCloud</h2>
<ol>
<li>
<p>安装<em>dnf</em>包(系统内已安装可跳过此步骤):</p>
<p><code>yum install dnf</code></p>
</li>
<li>
<p>安装<em>dnf config-manager</em>命令(系统内已安装可跳过此步骤):</p>
<p><code>dnf install 'dnf-command(config-manager)'</code></p>
</li>
<li>
<p>添加新的ownCloud软件源:</p>
<p><code>rpm --import https://download.owncloud.org/download/repositories/production/CentOS_7/repodata/repomd.xml.key</code></p>
</li>
<li>
<p>安装ownCloud-files:</p>
<pre><code class="language-shell">dnf config-manager --add-repo  http://download.owncloud.org/download/repositories/production/CentOS_7/ce:stable.repo
dnf clean all
dnf install owncloud-files
</code></pre>
</li>
<li>
<p>检查是否安装成功:</p>
<p>如果<code>/var/www/html</code>文件夹内有<code>owncloud</code>文件夹，说明安装成功。</p>
</li>
<li>
<p>修改根目录(可选)</p>
<p>直接复制<code>owncloud</code>文件夹到目标文件夹即可(<strong>要保留一份后面可能会用到</strong>)</p>
</li>
</ol>
<h2 id="添加网站">添加网站</h2>
<p>将网站根目录指向<code>.../owncloud</code>即可:</p>
<pre><code class="language-conf">server
{
    listen 80;
    server_name 你的服务器ip或域名;
    index index.php index.html index.htm default.php default.htm default.html;
    root .../owncloud/;

    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则
    #error_page 404/404.html;
    #SSL-END

    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改
    #error_page 404 /404.html;
    #error_page 502 /502.html;
    #ERROR-PAGE-END

    #PHP-INFO-START  PHP引用配置，可以注释或修改
    include enable-php-72.conf;
    #PHP-INFO-END

    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效
    include /www/server/panel/vhost/rewrite/your.conf;
    #REWRITE-END

    #禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)
    {
        return 404;
    }

    #防盗链配置
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires      30d;
        error_log off;
        access_log /dev/null;
    }
    location ~ .*\.(js|css)?$
    {
        expires      12h;
        error_log off;
        access_log /dev/null;
    }
    access_log  /www/wwwlogs/your.log;
    error_log  /www/wwwlogs/your.error.log;
}
</code></pre>
<h2 id="创建数据库">创建数据库</h2>
<p>创建数据库并记住数<code>据库名</code>,<code>用户名</code>,<code>密码</code>。</p>
<h2 id="配置数据库及管理员帐号">配置数据库及管理员帐号</h2>
<p>访问你的网站(ip或域名)看到如下内容(报错请给根目录&quot;775&quot;或&quot;777&quot;权限):</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/006brDXlly1g7ldu7hya4j31460l0hcf.webp" alt="初次访问" loading="lazy"></figure>
<ul>
<li>输入管理员帐号密码(需要记住)</li>
<li>数据目录可不修改</li>
<li>数据库选择<em>MySQL/MariaDB</em>并输入数据库名、帐号、密码、主机名及端口号(默认localhost:3306)</li>
</ul>
<p>填完上述内容后点击安装完成可看到如下内容:</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/006brDXlly1g7ldzu1721j31460l01kx.webp" alt="登录" loading="lazy"></figure>
<p>输入之前输入的<strong>管理员帐号密码</strong>登录即可。</p>
<h2 id="安全及设置警告">安全及设置警告</h2>
<ol>
<li>
<p>PHP 似乎没有设置好查询的系统环境变量。 用 getenv(&quot;PATH&quot;) 测试只返回一个空值。请检查 PHP 配置说明和服务器的 PHP 配置 安装文档 ↗，使用 PHP-FPM 时尤其注意。</p>
<p><strong>找到<code>/www/server/php/72/etc</code>目录，编辑<code>php-fpm.conf</code>文件，找到如下内容(没有则添加如下内容)</strong></p>
<pre><code class="language-conf">;env[HOSTNAME] = $HOSTNAME
;env[PATH] = /usr/local/bin:/usr/bin:/bin
;env[TMP] = /tmp
;env[TMPDIR] = /tmp
;env[TEMP] = /tmp
</code></pre>
<p><strong>去掉前面的';'并保存。</strong></p>
</li>
<li>
<p>事务文件锁定应配置为使用基于内存的锁定，而不是默认的基于慢速数据库的锁定。有关详细信息，请参阅 文档 ↗。</p>
<p><strong>编辑<code>.../owncloud/config/</code>目录下的<code>config.php</code>文件，添加如下内容(需安装前面提到的额外PHP扩展)：</strong></p>
<pre><code class="language-php">'memcache.local' =&gt; '\\OC\\Memcache\\APCu',
'memcache.locking' =&gt; '\\OC\\Memcache\\Redis',
'redis' =&gt;
array (
  'host' =&gt; 'localhost',
  'port' =&gt; 6379,
),
</code></pre>
<p><strong>保存即可。</strong></p>
</li>
<li>
<p>我们建议启用系统 cron，任何其他 cron 方法可能对性能和可靠性有影响。</p>
<p>添加计划任务:</p>
<ul>
<li>任务类型:Shell脚本</li>
<li>任务名称:随便取一个</li>
<li>执行周期:N分钟 15分</li>
<li>脚本内容:<code>sudo -u www /www/server/php/72/bin/php -f .../owncloud/cron.php</code><strong>(&quot;...&quot;要根据自己的实际情况修改)</strong></li>
</ul>
<p>设置中计划任务改为<code>Cron</code></p>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/006brDXlly1g7lf0g13exj31460l00us.webp" alt="计划任务" loading="lazy"></figure>
</li>
<li>
<p>您正在通过 HTTP 访问该站点，我们强烈建议您按照安全提示配置服务器强制使用 HTTPS。</p>
<p>给网站配置SSL证书，启用HTTPS即可。</p>
</li>
<li>
<p>HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。</p>
<p>编辑网站配置文件，添加如下代码:<br>
<code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;</code></p>
</li>
<li>
<p>你的数据目录和你的文件可能从互联网被访问到。.htaccess 文件不工作。我们强烈建议你配置你的网页服务器，使数据目录不再可访问，或者将数据目录移动到网页服务器根文档目录之外。</p>
<p>编辑网站配置文件，添加如下代码:</p>
<pre><code class="language-conf">location ~ ^/(data|config|\.ht|db_structure\.xml|README) {
    deny all;
}
</code></pre>
</li>
<li>
<p>PHP 无法访问 /dev/urandom, 由于安全原因, 这是强烈不推荐的.</p>
<p>编辑<code>.../owncloud</code>目录下的<code>.user.ini</code>文件，改为如下内容:</p>
<pre><code class="language-ini">upload_max_filesize=513M
post_max_size=513M
memory_limit=512M
mbstring.func_overload=0
always_populate_raw_post_data=-1
default_charset='UTF-8'
output_buffering=0
</code></pre>
</li>
<li>
<p>一些文件没有通过完整性检查。如何解决此问题的详细信息可以查看我们的 文档. (无效文件列表… / 重新扫描…)</p>
<p>跟之前保留的<code>owncloud</code>文件夹里的内容比较一下，看看有哪些文件不同替换过来就行(<strong>注意隐藏文件</strong>)</p>
</li>
</ol>
<h2 id="邮箱配置">邮箱配置</h2>
<ul>
<li>在<code>设置 &gt; 个人 &gt; 常规</code>中设置好管理员邮箱地址并保存</li>
<li>按下图配置好<strong>电子邮件服务器</strong>(以QQ邮箱为例，<strong>不要和上面使用同一个邮箱</strong>)<a href="https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;ch=&amp;tn=baidu&amp;bar=&amp;wd=qq%E9%82%AE%E7%AE%B1smtp%E8%AE%BE%E7%BD%AE&amp;oq=smtp%25E8%25AE%25BE%25E7%25BD%25AE&amp;rsv_pq=9a0979000000eac7&amp;rsv_t=f83a3KFhWkpW6TId%2FD2Iw5tyFH5uV0QQiVmc%2FNTC0kVZ3KZoC%2BSrhsjUJsY&amp;rqlang=cn&amp;rsv_enter=1&amp;prefixsug=smtp%25E8%25AE%25BE%25E7%25BD%25AE&amp;rsp=2&amp;rsv_dl=ts_2">如何配置？</a></li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://cdn.jsdelivr.net/gh/HCLonely/images@latest/post/old/006brDXlly1g7lz7j7bk5j31460l0766.webp" alt="邮箱配置" loading="lazy"></figure>
<ul>
<li>配置完成后点击下面的***发送邮件***发送测试邮件，如果之前设置的管理员邮箱可以收到测试邮件说明配置成功。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux下aria2的安装与配置]]></title>
        <id>https://gridea.hclonely.com/post/b9ab9265/</id>
        <link href="https://gridea.hclonely.com/post/b9ab9265/">
        </link>
        <updated>2019-09-14T12:09:42.000Z</updated>
        <content type="html"><![CDATA[<p><strong>这里来介绍一下linux系统下aria2的安装与配置</strong></p>
<h2 id="ubuntu">Ubuntu</h2>
<p>ubuntu的用户可以直接使用下面命令完成aria2的安装:<br>
<code>sudo apt-get install aria2</code></p>
<h2 id="centos">CentOS</h2>
<h3 id="下载">下载</h3>
<ul>
<li>到githup上获取源码：<a href="https://github.com/aria2/aria2/releases">https://github.com/aria2/aria2/releases</a></li>
<li><a href="https://hclonely-cdn.oss-cn-hongkong.aliyuncs.com/aria2-1.35.0.tar.gz">备用下载</a><br>
我使用的是这个版本:<br>
<a href="https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0.tar.gz">https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0.tar.gz</a></li>
<li>定位到aria2目录并输入以下命令下载:<br>
<code>cd /ssd/aria2 &amp;&amp; wget https://github.com/aria2/aria2/releases/download/release-1.35.0/aria2-1.35.0.tar.gz</code></li>
</ul>
<h3 id="升级gcc">升级gcc</h3>
<p>编译aria2需要升级一下gcc，最低要求 gcc &gt;= 4.8.2，使用<code>gcc --version</code>查看当前gcc版本，<strong>如果你的gcc已经在符合这个要求就可以跳到下一步了</strong><br>
复制下面代码，保存为：update_gcc.sh</p>
<pre><code class="language-bash"># 添加一个源
cd /etc/yum.repos.d
wget http://people.centos.org/tru/devtools-2/devtools-2.repo
# 安装所需包
yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++
# 保存原来的版本
mv /usr/bin/gcc /usr/bin/gcc-4.4.7
mv /usr/bin/g++ /usr/bin/g++-4.4.7
mv /usr/bin/c++ /usr/bin/c++-4.4.7
# 链接到新版本的gcc
ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gcc
ln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++
ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++
# 查看当前gcc版本
gcc --version
</code></pre>
<p>给予update_gcc.sh文件可执行权限并执行<br>
<code>chmod 754 update_gcc.sh &amp;&amp; ./update_gcc.sh</code><br>
<em><strong>在执行之前需要确保安装了wget，如果没有wget的话，脚本执行会报错!!!</strong></em><br>
等待完成!!!</p>
<h3 id="解压并开始编译安装">解压并开始编译安装</h3>
<p><code>tar zxvf aria2-1.34.0.tar.gz &amp;&amp; cd aria2-1.34.0 &amp;&amp; mkdir build &amp;&amp; cd build &amp;&amp; ../configure &amp;&amp; make &amp;&amp; make install</code><br>
<em>比较长时间的等待~~</em></p>
<h3 id="创建目录与配置文件">创建目录与配置文件</h3>
<pre><code class="language-bash"># 这一步需要切换到root下进行 
# 需要 su  一下
cd /ssd/www &amp;&amp; mkdir aria2 &amp;&amp; cd aria2 &amp;&amp; touch aria2.conf &amp;&amp; touch aria2.session
</code></pre>
<p>编辑aria2.conf文件内容，内容如下:</p>
<pre><code class="language-bash"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置
#dir=~/download
# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M
disk-cache=5M
# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc
# 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc
# falloc和trunc则需要文件系统和内核支持, NTFS建议使用falloc, EXT3/4建议trunc
file-allocation=none
# 断点续传
continue=true
## 下载连接相关 ##
# 最大同时下载任务数, 运行时可修改, 默认:5
max-concurrent-downloads=5
# 同一服务器连接数, 添加时可指定, 默认:1
max-connection-per-server=15
# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M
# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载
min-split-size=10M
# 单个任务最大线程数, 添加时可指定, 默认:5
split=5
# 整体下载速度限制, 运行时可修改, 默认:0
#max-overall-download-limit=0
# 单个任务下载速度限制, 默认:0
#max-download-limit=0
# 整体上传速度限制, 运行时可修改, 默认:0
max-overall-upload-limit=20kb
# 单个任务上传速度限制, 默认:0
max-upload-limit=5kb
# 禁用IPv6, 默认:false
disable-ipv6=true
# 禁用https证书检查
check-certificate=false
#运行覆盖已存在文件
allow-overwrite=true
#自动重命名
auto-file-renaming
## 进度保存相关 ##
# 从会话文件中读取下载任务
input-file=/etc/aria2/aria2.session
# 在Aria2退出时保存`错误/未完成`的下载任务到会话文件
save-session=/etc/aria2/aria2.session
# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0
save-session-interval=30
## RPC相关设置 ##
# 启用RPC, 默认:false
enable-rpc=true
# 允许所有来源, 默认:false
rpc-allow-origin-all=true
# 允许非外部访问, 默认:false
rpc-listen-all=true
# 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同
#event-poll=select
# RPC监听端口, 端口被占用时可以修改, 默认:6800
rpc-listen-port=6800
# 保存上传的种子文件
rpc-save-upload-metadata=false
## BT/PT下载相关 ##
# 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true
#follow-torrent=true
# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999
listen-port=51413
# 单个种子最大连接数, 默认:55
#bt-max-peers=55
# 打开DHT功能, PT需要禁用, 默认:true
enable-dht=true
# 打开IPv6 DHT功能, PT需要禁用
enable-dht6=false
# DHT网络监听端口, 默认:6881-6999
#dht-listen-port=6881-6999
# 本地节点查找, PT需要禁用, 默认:false
bt-enable-lpd=true
# 种子交换, PT需要禁用, 默认:true
enable-peer-exchange=true
# 每个种子限速, 对少种的PT很有用, 默认:50K
#bt-request-peer-speed-limit=50K
# 客户端伪装, PT需要
peer-id-prefix=-UT341-
user-agent=uTorrent/341(109279400)(30888)
# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0
seed-ratio=1.0
# 强制保存会话, 话即使任务已经完成, 默认:false
# 较新的版本开启后会在任务完成后依然保留.aria2文件
#force-save=false
# BT校验相关, 默认:true
#bt-hash-check-seed=true
# 继续之前的BT任务时, 无需再次校验, 默认:false
bt-seed-unverified=true
# 保存磁力链接元数据为种子文件(.torrent文件), 默认:false
#bt-save-metadata=false
#仅下载种子文件
bt-metadata-only=true
#通过网上的种子文件下载，种子保存在内存
follow-torrent=mem
</code></pre>
<h3 id="设置环境变量">设置环境变量</h3>
<ul>
<li>编辑~/.bashrc文件,加入下面内容<br>
<code>export PATH=/usr/local/src/aria2-1.33.0/build/src:$PATH</code></li>
<li>执行下面命令，使环境变量设置生效：<br>
<code>source ~/.bashrc</code></li>
<li>完成这一系列操作后，输入 aria  并可以补全的话就说明aria2已经安装成功了!!!<br>
然后，你就可以使用aria2下载你的bt种子或磁力链了，执行<code>aria2c -h</code>查看<strong>使用说明</strong></li>
</ul>
<h3 id="处理aria2下载bt种子或磁力链无速度或速度慢的情况添加tracker">处理aria2下载bt种子或磁力链无速度或速度慢的情况，添加tracker</h3>
<p>在aria2c.conf文件中添加下面内容:</p>
<pre><code class="language-text">bt-tracker=tracker url.....
例如:
bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.open-internet.nl:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://tracker.opentrackr.org:1337/announce,http://tracker.internetwarriors.net:1337/announce,udp://9.rarbg.to:2710/announce,udp://exodus.desync.com:6969/announce,http://tracker3.itzmx.com:6961/announce,udp://explodie.org:6969/announce,udp://ipv4.tracker.harry.lu:80/announce,udp://denis.stalker.upeer.me:6969/announce,udp://tracker4.itzmx.com:2710/announce,udp://tracker.tiny-vps.com:6969/announce,udp://tracker.port443.xyz:6969/announce,udp://thetracker.org:80/announce,udp://open.stealth.si:80/announce,udp://open.demonii.si:1337/announce,udp://bt.xxx-tracker.com:2710/announce,udp://tracker1.wasabii.com.tw:6969/announce,udp://tracker.torrent.eu.org:451/announce
</code></pre>
<p>tracker 地址自行到这里取最新的添加，每个地址之间以逗号分开:<br>
<a href="https://github.com/ngosang/trackerslist">https://github.com/ngosang/trackerslist</a></p>
<h3 id="使用以下命令后台启动">使用以下命令后台启动:</h3>
<p><code>aria2c --conf-path=/ssd/www/aria2/aria2.conf -D</code></p>
<blockquote>
<p>本文转自 <a href="https://www.cnblogs.com/LiQingsong/p/10293142.html">linux下aria2的安装与配置</a></p>
</blockquote>
]]></content>
    </entry>
</feed>